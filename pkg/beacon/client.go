// Package beacon implements the Azure ARM Beacon service API version 1.0.
//
// Beacon Api Documentation
package beacon

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Beacon
	DefaultBaseURI = "http://localhost:9005"
)

// BaseClient is the base client for Beacon.
type BaseClient struct {
	autorest.Client
	BaseURI string
}

// New creates an instance of the BaseClient client.
func New() BaseClient {
	return NewWithBaseURI(DefaultBaseURI)
}

// NewWithBaseURI creates an instance of the BaseClient client.
func NewWithBaseURI(baseURI string) BaseClient {
	return BaseClient{
		Client:  autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI: baseURI,
	}
}

// CreateExpectation sends the create expectation request.
func (client BaseClient) CreateExpectation(ctx context.Context, body *ExpectationInputs) (result Expectation, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.Name", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.DisplayName", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.Tenant", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.System", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "CreateExpectation", err.Error())
	}

	req, err := client.CreateExpectationPreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateExpectation", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateExpectationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateExpectation", resp, "Failure sending request")
		return
	}

	result, err = client.CreateExpectationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateExpectation", resp, "Failure responding to request")
	}

	return
}

// CreateExpectationPreparer prepares the CreateExpectation request.
func (client BaseClient) CreateExpectationPreparer(ctx context.Context, body *ExpectationInputs) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/expectations"))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateExpectationSender sends the CreateExpectation request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateExpectationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateExpectationResponder handles the response to the CreateExpectation request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateExpectationResponder(resp *http.Response) (result Expectation, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateFeature sends the create feature request.
func (client BaseClient) CreateFeature(ctx context.Context, body *Feature) (result Feature, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.Name", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.Version", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "body.Version", Name: validation.Pattern, Rule: `^v?((\d+)\.(\d+)\.(\d+))(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?(?:\+([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$`, Chain: nil}}},
					{Target: "body.Path", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "body.Path", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}},
				}}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "CreateFeature", err.Error())
	}

	req, err := client.CreateFeaturePreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeature", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateFeatureSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeature", resp, "Failure sending request")
		return
	}

	result, err = client.CreateFeatureResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeature", resp, "Failure responding to request")
	}

	return
}

// CreateFeaturePreparer prepares the CreateFeature request.
func (client BaseClient) CreateFeaturePreparer(ctx context.Context, body *Feature) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/features"))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateFeatureSender sends the CreateFeature request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateFeatureSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateFeatureResponder handles the response to the CreateFeature request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateFeatureResponder(resp *http.Response) (result Feature, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateFeatureInstance sends the create feature instance request.
func (client BaseClient) CreateFeatureInstance(ctx context.Context, body *FeatureInstanceInputs) (result FeatureInstance, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.FeatureName", Name: validation.Null, Rule: true,
					Chain: []validation.Constraint{{Target: "body.FeatureName", Name: validation.Pattern, Rule: `^[a-z0-9-]+$`, Chain: nil}}},
					{Target: "body.FeatureVersion", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "body.FeatureVersion", Name: validation.Pattern, Rule: `^v?((\d+)\.(\d+)\.(\d+))(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?(?:\+([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$`, Chain: nil}}},
					{Target: "body.InstanceName", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "body.InstanceName", Name: validation.Pattern, Rule: `^[a-z0-9-]+$`, Chain: nil}}},
				}}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "CreateFeatureInstance", err.Error())
	}

	req, err := client.CreateFeatureInstancePreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeatureInstance", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateFeatureInstanceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeatureInstance", resp, "Failure sending request")
		return
	}

	result, err = client.CreateFeatureInstanceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeatureInstance", resp, "Failure responding to request")
	}

	return
}

// CreateFeatureInstancePreparer prepares the CreateFeatureInstance request.
func (client BaseClient) CreateFeatureInstancePreparer(ctx context.Context, body *FeatureInstanceInputs) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/features/instances"))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateFeatureInstanceSender sends the CreateFeatureInstance request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateFeatureInstanceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateFeatureInstanceResponder handles the response to the CreateFeatureInstance request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateFeatureInstanceResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateSystem sends the create system request.
func (client BaseClient) CreateSystem(ctx context.Context, body *SystemInputs) (result System, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.Name", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.Tenant", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "CreateSystem", err.Error())
	}

	req, err := client.CreateSystemPreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateSystem", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSystemSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateSystem", resp, "Failure sending request")
		return
	}

	result, err = client.CreateSystemResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateSystem", resp, "Failure responding to request")
	}

	return
}

// CreateSystemPreparer prepares the CreateSystem request.
func (client BaseClient) CreateSystemPreparer(ctx context.Context, body *SystemInputs) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/systems"))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSystemSender sends the CreateSystem request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateSystemSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateSystemResponder handles the response to the CreateSystem request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateSystemResponder(resp *http.Response) (result System, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteExpectation sends the delete expectation request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) DeleteExpectation(ctx context.Context, pathParameter string) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "DeleteExpectation", err.Error())
	}

	req, err := client.DeleteExpectationPreparer(ctx, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteExpectation", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteExpectationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteExpectation", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteExpectationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteExpectation", resp, "Failure responding to request")
	}

	return
}

// DeleteExpectationPreparer prepares the DeleteExpectation request.
func (client BaseClient) DeleteExpectationPreparer(ctx context.Context, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteExpectationSender sends the DeleteExpectation request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteExpectationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteExpectationResponder handles the response to the DeleteExpectation request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteExpectationResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteFeatureInstance sends the delete feature instance request.
func (client BaseClient) DeleteFeatureInstance(ctx context.Context, featureName string, featureVersion string, instanceName string) (result FeatureInstance, err error) {
	req, err := client.DeleteFeatureInstancePreparer(ctx, featureName, featureVersion, instanceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteFeatureInstance", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteFeatureInstanceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteFeatureInstance", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteFeatureInstanceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteFeatureInstance", resp, "Failure responding to request")
	}

	return
}

// DeleteFeatureInstancePreparer prepares the DeleteFeatureInstance request.
func (client BaseClient) DeleteFeatureInstancePreparer(ctx context.Context, featureName string, featureVersion string, instanceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"featureName":    autorest.Encode("path", featureName),
		"featureVersion": autorest.Encode("path", featureVersion),
		"instanceName":   autorest.Encode("path", instanceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/features/instances/{featureName}/{featureVersion}/{instanceName}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteFeatureInstanceSender sends the DeleteFeatureInstance request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteFeatureInstanceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteFeatureInstanceResponder handles the response to the DeleteFeatureInstance request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteFeatureInstanceResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteSystem sends the delete system request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) DeleteSystem(ctx context.Context, pathParameter string) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "DeleteSystem", err.Error())
	}

	req, err := client.DeleteSystemPreparer(ctx, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteSystem", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSystemSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteSystem", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteSystemResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteSystem", resp, "Failure responding to request")
	}

	return
}

// DeleteSystemPreparer prepares the DeleteSystem request.
func (client BaseClient) DeleteSystemPreparer(ctx context.Context, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/systems/{path}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSystemSender sends the DeleteSystem request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteSystemSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteSystemResponder handles the response to the DeleteSystem request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteSystemResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DisableFeatureInstance sends the disable feature instance request.
func (client BaseClient) DisableFeatureInstance(ctx context.Context, featureName string, featureVersion string, instanceName string) (result FeatureInstance, err error) {
	req, err := client.DisableFeatureInstancePreparer(ctx, featureName, featureVersion, instanceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DisableFeatureInstance", nil, "Failure preparing request")
		return
	}

	resp, err := client.DisableFeatureInstanceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DisableFeatureInstance", resp, "Failure sending request")
		return
	}

	result, err = client.DisableFeatureInstanceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DisableFeatureInstance", resp, "Failure responding to request")
	}

	return
}

// DisableFeatureInstancePreparer prepares the DisableFeatureInstance request.
func (client BaseClient) DisableFeatureInstancePreparer(ctx context.Context, featureName string, featureVersion string, instanceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"featureName":    autorest.Encode("path", featureName),
		"featureVersion": autorest.Encode("path", featureVersion),
		"instanceName":   autorest.Encode("path", instanceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/features/instances/{featureName}/{featureVersion}/{instanceName}/actions/disable", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DisableFeatureInstanceSender sends the DisableFeatureInstance request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DisableFeatureInstanceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DisableFeatureInstanceResponder handles the response to the DisableFeatureInstance request. The method always
// closes the http.Response Body.
func (client BaseClient) DisableFeatureInstanceResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// FailExpectation sends the fail expectation request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) FailExpectation(ctx context.Context, pathParameter string, body *FailedExpectation) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "FailExpectation", err.Error())
	}

	req, err := client.FailExpectationPreparer(ctx, pathParameter, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "FailExpectation", nil, "Failure preparing request")
		return
	}

	resp, err := client.FailExpectationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "FailExpectation", resp, "Failure sending request")
		return
	}

	result, err = client.FailExpectationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "FailExpectation", resp, "Failure responding to request")
	}

	return
}

// FailExpectationPreparer prepares the FailExpectation request.
func (client BaseClient) FailExpectationPreparer(ctx context.Context, pathParameter string, body *FailedExpectation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}/events/failed", pathParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FailExpectationSender sends the FailExpectation request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FailExpectationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FailExpectationResponder handles the response to the FailExpectation request. The method always
// closes the http.Response Body.
func (client BaseClient) FailExpectationResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// FulfilExpectation sends the fulfil expectation request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) FulfilExpectation(ctx context.Context, pathParameter string, body *FulfilledExpectation) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "FulfilExpectation", err.Error())
	}

	req, err := client.FulfilExpectationPreparer(ctx, pathParameter, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "FulfilExpectation", nil, "Failure preparing request")
		return
	}

	resp, err := client.FulfilExpectationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "FulfilExpectation", resp, "Failure sending request")
		return
	}

	result, err = client.FulfilExpectationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "FulfilExpectation", resp, "Failure responding to request")
	}

	return
}

// FulfilExpectationPreparer prepares the FulfilExpectation request.
func (client BaseClient) FulfilExpectationPreparer(ctx context.Context, pathParameter string, body *FulfilledExpectation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}/events/fulfilled", pathParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FulfilExpectationSender sends the FulfilExpectation request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FulfilExpectationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FulfilExpectationResponder handles the response to the FulfilExpectation request. The method always
// closes the http.Response Body.
func (client BaseClient) FulfilExpectationResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPIConfigs sends the get api configs request.
func (client BaseClient) GetAPIConfigs(ctx context.Context) (result SetObject, err error) {
	req, err := client.GetAPIConfigsPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigs", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPIConfigsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigs", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPIConfigsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigs", resp, "Failure responding to request")
	}

	return
}

// GetAPIConfigsPreparer prepares the GetAPIConfigs request.
func (client BaseClient) GetAPIConfigsPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/configs"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPIConfigsSender sends the GetAPIConfigs request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPIConfigsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPIConfigsResponder handles the response to the GetAPIConfigs request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPIConfigsResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPIConfigsID sends the get api configs id request.
// Parameters:
// ID - the ID of the config to retrieve.
func (client BaseClient) GetAPIConfigsID(ctx context.Context, ID string) (result SetObject, err error) {
	req, err := client.GetAPIConfigsIDPreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigsID", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPIConfigsIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigsID", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPIConfigsIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigsID", resp, "Failure responding to request")
	}

	return
}

// GetAPIConfigsIDPreparer prepares the GetAPIConfigsID request.
func (client BaseClient) GetAPIConfigsIDPreparer(ctx context.Context, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/configs/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPIConfigsIDSender sends the GetAPIConfigsID request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPIConfigsIDSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPIConfigsIDResponder handles the response to the GetAPIConfigsID request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPIConfigsIDResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetEventsByPath sends the get events by path request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) GetEventsByPath(ctx context.Context, pathParameter string, top *float64, skip *float64) (result ListEvent, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetEventsByPath", err.Error())
	}

	req, err := client.GetEventsByPathPreparer(ctx, pathParameter, top, skip)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetEventsByPath", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetEventsByPathSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetEventsByPath", resp, "Failure sending request")
		return
	}

	result, err = client.GetEventsByPathResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetEventsByPath", resp, "Failure responding to request")
	}

	return
}

// GetEventsByPathPreparer prepares the GetEventsByPath request.
func (client BaseClient) GetEventsByPathPreparer(ctx context.Context, pathParameter string, top *float64, skip *float64) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	queryParameters := map[string]interface{}{}
	if top != nil {
		queryParameters["top"] = autorest.Encode("query", *top)
	} else {
		queryParameters["top"] = autorest.Encode("query", 25)
	}
	if skip != nil {
		queryParameters["skip"] = autorest.Encode("query", *skip)
	} else {
		queryParameters["skip"] = autorest.Encode("query", 0)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/events/{path}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetEventsByPathSender sends the GetEventsByPath request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetEventsByPathSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetEventsByPathResponder handles the response to the GetEventsByPath request. The method always
// closes the http.Response Body.
func (client BaseClient) GetEventsByPathResponder(resp *http.Response) (result ListEvent, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetExpectation sends the get expectation request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) GetExpectation(ctx context.Context, pathParameter string) (result Expectation, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetExpectation", err.Error())
	}

	req, err := client.GetExpectationPreparer(ctx, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetExpectation", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetExpectationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetExpectation", resp, "Failure sending request")
		return
	}

	result, err = client.GetExpectationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetExpectation", resp, "Failure responding to request")
	}

	return
}

// GetExpectationPreparer prepares the GetExpectation request.
func (client BaseClient) GetExpectationPreparer(ctx context.Context, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetExpectationSender sends the GetExpectation request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetExpectationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetExpectationResponder handles the response to the GetExpectation request. The method always
// closes the http.Response Body.
func (client BaseClient) GetExpectationResponder(resp *http.Response) (result Expectation, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetExpectationEvents sends the get expectation events request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) GetExpectationEvents(ctx context.Context, pathParameter string, top *float64, skip *float64) (result ListEvent, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetExpectationEvents", err.Error())
	}

	req, err := client.GetExpectationEventsPreparer(ctx, pathParameter, top, skip)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetExpectationEvents", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetExpectationEventsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetExpectationEvents", resp, "Failure sending request")
		return
	}

	result, err = client.GetExpectationEventsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetExpectationEvents", resp, "Failure responding to request")
	}

	return
}

// GetExpectationEventsPreparer prepares the GetExpectationEvents request.
func (client BaseClient) GetExpectationEventsPreparer(ctx context.Context, pathParameter string, top *float64, skip *float64) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	queryParameters := map[string]interface{}{}
	if top != nil {
		queryParameters["top"] = autorest.Encode("query", *top)
	} else {
		queryParameters["top"] = autorest.Encode("query", 25)
	}
	if skip != nil {
		queryParameters["skip"] = autorest.Encode("query", *skip)
	} else {
		queryParameters["skip"] = autorest.Encode("query", 0)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}/events", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetExpectationEventsSender sends the GetExpectationEvents request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetExpectationEventsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetExpectationEventsResponder handles the response to the GetExpectationEvents request. The method always
// closes the http.Response Body.
func (client BaseClient) GetExpectationEventsResponder(resp *http.Response) (result ListEvent, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetExpectations sends the get expectations request.
func (client BaseClient) GetExpectations(ctx context.Context, tenant string, system string) (result ListExpectation, err error) {
	req, err := client.GetExpectationsPreparer(ctx, tenant, system)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetExpectations", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetExpectationsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetExpectations", resp, "Failure sending request")
		return
	}

	result, err = client.GetExpectationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetExpectations", resp, "Failure responding to request")
	}

	return
}

// GetExpectationsPreparer prepares the GetExpectations request.
func (client BaseClient) GetExpectationsPreparer(ctx context.Context, tenant string, system string) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"tenant": autorest.Encode("query", tenant),
	}
	if len(system) > 0 {
		queryParameters["system"] = autorest.Encode("query", system)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/expectations"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetExpectationsSender sends the GetExpectations request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetExpectationsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetExpectationsResponder handles the response to the GetExpectations request. The method always
// closes the http.Response Body.
func (client BaseClient) GetExpectationsResponder(resp *http.Response) (result ListExpectation, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetFeatureInstance sends the get feature instance request.
func (client BaseClient) GetFeatureInstance(ctx context.Context, featureName string, featureVersion string, instanceName string) (result FeatureInstance, err error) {
	req, err := client.GetFeatureInstancePreparer(ctx, featureName, featureVersion, instanceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstance", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFeatureInstanceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstance", resp, "Failure sending request")
		return
	}

	result, err = client.GetFeatureInstanceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstance", resp, "Failure responding to request")
	}

	return
}

// GetFeatureInstancePreparer prepares the GetFeatureInstance request.
func (client BaseClient) GetFeatureInstancePreparer(ctx context.Context, featureName string, featureVersion string, instanceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"featureName":    autorest.Encode("path", featureName),
		"featureVersion": autorest.Encode("path", featureVersion),
		"instanceName":   autorest.Encode("path", instanceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/features/instances/{featureName}/{featureVersion}/{instanceName}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetFeatureInstanceSender sends the GetFeatureInstance request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetFeatureInstanceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetFeatureInstanceResponder handles the response to the GetFeatureInstance request. The method always
// closes the http.Response Body.
func (client BaseClient) GetFeatureInstanceResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetFeatureInstanceByKey sends the get feature instance by key request.
func (client BaseClient) GetFeatureInstanceByKey(ctx context.Context, key string) (result FeatureInstance, err error) {
	req, err := client.GetFeatureInstanceByKeyPreparer(ctx, key)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstanceByKey", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFeatureInstanceByKeySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstanceByKey", resp, "Failure sending request")
		return
	}

	result, err = client.GetFeatureInstanceByKeyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstanceByKey", resp, "Failure responding to request")
	}

	return
}

// GetFeatureInstanceByKeyPreparer prepares the GetFeatureInstanceByKey request.
func (client BaseClient) GetFeatureInstanceByKeyPreparer(ctx context.Context, key string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"key": autorest.Encode("path", key),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/features/instances/{key}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetFeatureInstanceByKeySender sends the GetFeatureInstanceByKey request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetFeatureInstanceByKeySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetFeatureInstanceByKeyResponder handles the response to the GetFeatureInstanceByKey request. The method always
// closes the http.Response Body.
func (client BaseClient) GetFeatureInstanceByKeyResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetFeatureInstances sends the get feature instances request.
// Parameters:
// featureVersion - a SemVer version number.
// tenant - the tenant to filter instances by. Ignored for non-admins.
func (client BaseClient) GetFeatureInstances(ctx context.Context, featureName string, featureVersion string, versionRange string, instanceID string, tenant string) (result ListFeatureInstance, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: featureVersion,
			Constraints: []validation.Constraint{{Target: "featureVersion", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetFeatureInstances", err.Error())
	}

	req, err := client.GetFeatureInstancesPreparer(ctx, featureName, featureVersion, versionRange, instanceID, tenant)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstances", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFeatureInstancesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstances", resp, "Failure sending request")
		return
	}

	result, err = client.GetFeatureInstancesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstances", resp, "Failure responding to request")
	}

	return
}

// GetFeatureInstancesPreparer prepares the GetFeatureInstances request.
func (client BaseClient) GetFeatureInstancesPreparer(ctx context.Context, featureName string, featureVersion string, versionRange string, instanceID string, tenant string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if len(featureName) > 0 {
		queryParameters["featureName"] = autorest.Encode("query", featureName)
	}
	if len(featureVersion) > 0 {
		queryParameters["featureVersion"] = autorest.Encode("query", featureVersion)
	}
	if len(versionRange) > 0 {
		queryParameters["versionRange"] = autorest.Encode("query", versionRange)
	}
	if len(instanceID) > 0 {
		queryParameters["instanceID"] = autorest.Encode("query", instanceID)
	}
	if len(tenant) > 0 {
		queryParameters["tenant"] = autorest.Encode("query", tenant)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/features/instances"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetFeatureInstancesSender sends the GetFeatureInstances request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetFeatureInstancesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetFeatureInstancesResponder handles the response to the GetFeatureInstances request. The method always
// closes the http.Response Body.
func (client BaseClient) GetFeatureInstancesResponder(resp *http.Response) (result ListFeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetFeatures sends the get features request.
func (client BaseClient) GetFeatures(ctx context.Context, name string, versionRange string) (result ListFeature, err error) {
	req, err := client.GetFeaturesPreparer(ctx, name, versionRange)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatures", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFeaturesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatures", resp, "Failure sending request")
		return
	}

	result, err = client.GetFeaturesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatures", resp, "Failure responding to request")
	}

	return
}

// GetFeaturesPreparer prepares the GetFeatures request.
func (client BaseClient) GetFeaturesPreparer(ctx context.Context, name string, versionRange string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if len(name) > 0 {
		queryParameters["name"] = autorest.Encode("query", name)
	}
	if len(versionRange) > 0 {
		queryParameters["versionRange"] = autorest.Encode("query", versionRange)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/features"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetFeaturesSender sends the GetFeatures request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetFeaturesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetFeaturesResponder handles the response to the GetFeatures request. The method always
// closes the http.Response Body.
func (client BaseClient) GetFeaturesResponder(resp *http.Response) (result ListFeature, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetSystem sends the get system request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) GetSystem(ctx context.Context, pathParameter string) (result System, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetSystem", err.Error())
	}

	req, err := client.GetSystemPreparer(ctx, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetSystem", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSystemSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetSystem", resp, "Failure sending request")
		return
	}

	result, err = client.GetSystemResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetSystem", resp, "Failure responding to request")
	}

	return
}

// GetSystemPreparer prepares the GetSystem request.
func (client BaseClient) GetSystemPreparer(ctx context.Context, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/systems/{path}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSystemSender sends the GetSystem request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetSystemSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetSystemResponder handles the response to the GetSystem request. The method always
// closes the http.Response Body.
func (client BaseClient) GetSystemResponder(resp *http.Response) (result System, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetSystems sends the get systems request.
func (client BaseClient) GetSystems(ctx context.Context, tenant string) (result ListSystem, err error) {
	req, err := client.GetSystemsPreparer(ctx, tenant)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetSystems", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSystemsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetSystems", resp, "Failure sending request")
		return
	}

	result, err = client.GetSystemsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetSystems", resp, "Failure responding to request")
	}

	return
}

// GetSystemsPreparer prepares the GetSystems request.
func (client BaseClient) GetSystemsPreparer(ctx context.Context, tenant string) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"tenant": autorest.Encode("query", tenant),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/systems"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSystemsSender sends the GetSystems request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetSystemsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetSystemsResponder handles the response to the GetSystems request. The method always
// closes the http.Response Body.
func (client BaseClient) GetSystemsResponder(resp *http.Response) (result ListSystem, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// RescheduleExpectation sends the reschedule expectation request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) RescheduleExpectation(ctx context.Context, pathParameter string, body *RescheduledExpectation) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `.*`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "RescheduleExpectation", err.Error())
	}

	req, err := client.RescheduleExpectationPreparer(ctx, pathParameter, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "RescheduleExpectation", nil, "Failure preparing request")
		return
	}

	resp, err := client.RescheduleExpectationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "RescheduleExpectation", resp, "Failure sending request")
		return
	}

	result, err = client.RescheduleExpectationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "RescheduleExpectation", resp, "Failure responding to request")
	}

	return
}

// RescheduleExpectationPreparer prepares the RescheduleExpectation request.
func (client BaseClient) RescheduleExpectationPreparer(ctx context.Context, pathParameter string, body *RescheduledExpectation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}/events/rescheduled", pathParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RescheduleExpectationSender sends the RescheduleExpectation request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) RescheduleExpectationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RescheduleExpectationResponder handles the response to the RescheduleExpectation request. The method always
// closes the http.Response Body.
func (client BaseClient) RescheduleExpectationResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
