// Package beacon implements the Azure ARM Beacon service API version 1.0.
//
// Beacon Api Documentation
package beacon

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Beacon
	DefaultBaseURI = "http://localhost:9005"
)

// BaseClient is the base client for Beacon.
type BaseClient struct {
	autorest.Client
	BaseURI string
}

// New creates an instance of the BaseClient client.
func New() BaseClient {
	return NewWithBaseURI(DefaultBaseURI)
}

// NewWithBaseURI creates an instance of the BaseClient client.
func NewWithBaseURI(baseURI string) BaseClient {
	return BaseClient{
		Client:  autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI: baseURI,
	}
}

// CreateFeature sends the create feature request.
func (client BaseClient) CreateFeature(ctx context.Context, body *Feature) (result Feature, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.Name", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.Version", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "body.Version", Name: validation.Pattern, Rule: `^v?((\d+)\.(\d+)\.(\d+))(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?(?:\+([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$`, Chain: nil}}},
				}}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "CreateFeature", err.Error())
	}

	req, err := client.CreateFeaturePreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeature", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateFeatureSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeature", resp, "Failure sending request")
		return
	}

	result, err = client.CreateFeatureResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeature", resp, "Failure responding to request")
	}

	return
}

// CreateFeaturePreparer prepares the CreateFeature request.
func (client BaseClient) CreateFeaturePreparer(ctx context.Context, body *Feature) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/features"))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateFeatureSender sends the CreateFeature request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateFeatureSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateFeatureResponder handles the response to the CreateFeature request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateFeatureResponder(resp *http.Response) (result Feature, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateFeatureInstance sends the create feature instance request.
func (client BaseClient) CreateFeatureInstance(ctx context.Context, body *FeatureInstanceInputs) (result FeatureInstance, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.FeatureName", Name: validation.Null, Rule: true,
					Chain: []validation.Constraint{{Target: "body.FeatureName", Name: validation.Pattern, Rule: `^[a-z0-9-]+$`, Chain: nil}}},
					{Target: "body.FeatureVersion", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "body.FeatureVersion", Name: validation.Pattern, Rule: `^v?((\d+)\.(\d+)\.(\d+))(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?(?:\+([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$`, Chain: nil}}},
					{Target: "body.InstanceName", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "body.InstanceName", Name: validation.Pattern, Rule: `^[a-z0-9-]+$`, Chain: nil}}},
				}}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "CreateFeatureInstance", err.Error())
	}

	req, err := client.CreateFeatureInstancePreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeatureInstance", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateFeatureInstanceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeatureInstance", resp, "Failure sending request")
		return
	}

	result, err = client.CreateFeatureInstanceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "CreateFeatureInstance", resp, "Failure responding to request")
	}

	return
}

// CreateFeatureInstancePreparer prepares the CreateFeatureInstance request.
func (client BaseClient) CreateFeatureInstancePreparer(ctx context.Context, body *FeatureInstanceInputs) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/features/instances"))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateFeatureInstanceSender sends the CreateFeatureInstance request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateFeatureInstanceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateFeatureInstanceResponder handles the response to the CreateFeatureInstance request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateFeatureInstanceResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteAPIExpectationsPath sends the delete api expectations path request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) DeleteAPIExpectationsPath(ctx context.Context, pathParameter string) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "DeleteAPIExpectationsPath", err.Error())
	}

	req, err := client.DeleteAPIExpectationsPathPreparer(ctx, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteAPIExpectationsPath", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteAPIExpectationsPathSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteAPIExpectationsPath", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteAPIExpectationsPathResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteAPIExpectationsPath", resp, "Failure responding to request")
	}

	return
}

// DeleteAPIExpectationsPathPreparer prepares the DeleteAPIExpectationsPath request.
func (client BaseClient) DeleteAPIExpectationsPathPreparer(ctx context.Context, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteAPIExpectationsPathSender sends the DeleteAPIExpectationsPath request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteAPIExpectationsPathSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteAPIExpectationsPathResponder handles the response to the DeleteAPIExpectationsPath request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteAPIExpectationsPathResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteAPISystemsPath sends the delete api systems path request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) DeleteAPISystemsPath(ctx context.Context, pathParameter string) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "DeleteAPISystemsPath", err.Error())
	}

	req, err := client.DeleteAPISystemsPathPreparer(ctx, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteAPISystemsPath", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteAPISystemsPathSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteAPISystemsPath", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteAPISystemsPathResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteAPISystemsPath", resp, "Failure responding to request")
	}

	return
}

// DeleteAPISystemsPathPreparer prepares the DeleteAPISystemsPath request.
func (client BaseClient) DeleteAPISystemsPathPreparer(ctx context.Context, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/systems/{path}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteAPISystemsPathSender sends the DeleteAPISystemsPath request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteAPISystemsPathSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteAPISystemsPathResponder handles the response to the DeleteAPISystemsPath request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteAPISystemsPathResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteFeatureInstance sends the delete feature instance request.
func (client BaseClient) DeleteFeatureInstance(ctx context.Context, featureName string, featureVersion string, instanceName string) (result FeatureInstance, err error) {
	req, err := client.DeleteFeatureInstancePreparer(ctx, featureName, featureVersion, instanceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteFeatureInstance", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteFeatureInstanceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteFeatureInstance", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteFeatureInstanceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DeleteFeatureInstance", resp, "Failure responding to request")
	}

	return
}

// DeleteFeatureInstancePreparer prepares the DeleteFeatureInstance request.
func (client BaseClient) DeleteFeatureInstancePreparer(ctx context.Context, featureName string, featureVersion string, instanceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"featureName":    autorest.Encode("path", featureName),
		"featureVersion": autorest.Encode("path", featureVersion),
		"instanceName":   autorest.Encode("path", instanceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/features/instances/{featureName}/{featureVersion}/{instanceName}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteFeatureInstanceSender sends the DeleteFeatureInstance request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteFeatureInstanceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteFeatureInstanceResponder handles the response to the DeleteFeatureInstance request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteFeatureInstanceResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DisableFeatureInstance sends the disable feature instance request.
func (client BaseClient) DisableFeatureInstance(ctx context.Context, featureName string, featureVersion string, instanceName string) (result FeatureInstance, err error) {
	req, err := client.DisableFeatureInstancePreparer(ctx, featureName, featureVersion, instanceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DisableFeatureInstance", nil, "Failure preparing request")
		return
	}

	resp, err := client.DisableFeatureInstanceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DisableFeatureInstance", resp, "Failure sending request")
		return
	}

	result, err = client.DisableFeatureInstanceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "DisableFeatureInstance", resp, "Failure responding to request")
	}

	return
}

// DisableFeatureInstancePreparer prepares the DisableFeatureInstance request.
func (client BaseClient) DisableFeatureInstancePreparer(ctx context.Context, featureName string, featureVersion string, instanceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"featureName":    autorest.Encode("path", featureName),
		"featureVersion": autorest.Encode("path", featureVersion),
		"instanceName":   autorest.Encode("path", instanceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/features/instances/{featureName}/{featureVersion}/{instanceName}/actions/disable", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DisableFeatureInstanceSender sends the DisableFeatureInstance request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DisableFeatureInstanceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DisableFeatureInstanceResponder handles the response to the DisableFeatureInstance request. The method always
// closes the http.Response Body.
func (client BaseClient) DisableFeatureInstanceResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPIConfigs sends the get api configs request.
func (client BaseClient) GetAPIConfigs(ctx context.Context) (result SetObject, err error) {
	req, err := client.GetAPIConfigsPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigs", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPIConfigsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigs", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPIConfigsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigs", resp, "Failure responding to request")
	}

	return
}

// GetAPIConfigsPreparer prepares the GetAPIConfigs request.
func (client BaseClient) GetAPIConfigsPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/configs"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPIConfigsSender sends the GetAPIConfigs request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPIConfigsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPIConfigsResponder handles the response to the GetAPIConfigs request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPIConfigsResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPIConfigsID sends the get api configs id request.
// Parameters:
// ID - the ID of the config to retrieve.
func (client BaseClient) GetAPIConfigsID(ctx context.Context, ID string) (result SetObject, err error) {
	req, err := client.GetAPIConfigsIDPreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigsID", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPIConfigsIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigsID", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPIConfigsIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIConfigsID", resp, "Failure responding to request")
	}

	return
}

// GetAPIConfigsIDPreparer prepares the GetAPIConfigsID request.
func (client BaseClient) GetAPIConfigsIDPreparer(ctx context.Context, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/configs/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPIConfigsIDSender sends the GetAPIConfigsID request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPIConfigsIDSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPIConfigsIDResponder handles the response to the GetAPIConfigsID request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPIConfigsIDResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPIEventsPath sends the get api events path request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) GetAPIEventsPath(ctx context.Context, pathParameter string, top *float64, skip *float64) (result ListEvent, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetAPIEventsPath", err.Error())
	}

	req, err := client.GetAPIEventsPathPreparer(ctx, pathParameter, top, skip)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIEventsPath", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPIEventsPathSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIEventsPath", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPIEventsPathResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIEventsPath", resp, "Failure responding to request")
	}

	return
}

// GetAPIEventsPathPreparer prepares the GetAPIEventsPath request.
func (client BaseClient) GetAPIEventsPathPreparer(ctx context.Context, pathParameter string, top *float64, skip *float64) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	queryParameters := map[string]interface{}{}
	if top != nil {
		queryParameters["top"] = autorest.Encode("query", *top)
	} else {
		queryParameters["top"] = autorest.Encode("query", 25)
	}
	if skip != nil {
		queryParameters["skip"] = autorest.Encode("query", *skip)
	} else {
		queryParameters["skip"] = autorest.Encode("query", 0)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/events/{path}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPIEventsPathSender sends the GetAPIEventsPath request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPIEventsPathSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPIEventsPathResponder handles the response to the GetAPIEventsPath request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPIEventsPathResponder(resp *http.Response) (result ListEvent, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPIExpectations sends the get api expectations request.
func (client BaseClient) GetAPIExpectations(ctx context.Context, tenant string, system string) (result ListExpectation, err error) {
	req, err := client.GetAPIExpectationsPreparer(ctx, tenant, system)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIExpectations", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPIExpectationsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIExpectations", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPIExpectationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIExpectations", resp, "Failure responding to request")
	}

	return
}

// GetAPIExpectationsPreparer prepares the GetAPIExpectations request.
func (client BaseClient) GetAPIExpectationsPreparer(ctx context.Context, tenant string, system string) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"tenant": autorest.Encode("query", tenant),
	}
	if len(system) > 0 {
		queryParameters["system"] = autorest.Encode("query", system)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/expectations"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPIExpectationsSender sends the GetAPIExpectations request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPIExpectationsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPIExpectationsResponder handles the response to the GetAPIExpectations request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPIExpectationsResponder(resp *http.Response) (result ListExpectation, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPIExpectationsPath sends the get api expectations path request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) GetAPIExpectationsPath(ctx context.Context, pathParameter string) (result Expectation, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetAPIExpectationsPath", err.Error())
	}

	req, err := client.GetAPIExpectationsPathPreparer(ctx, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIExpectationsPath", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPIExpectationsPathSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIExpectationsPath", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPIExpectationsPathResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIExpectationsPath", resp, "Failure responding to request")
	}

	return
}

// GetAPIExpectationsPathPreparer prepares the GetAPIExpectationsPath request.
func (client BaseClient) GetAPIExpectationsPathPreparer(ctx context.Context, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPIExpectationsPathSender sends the GetAPIExpectationsPath request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPIExpectationsPathSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPIExpectationsPathResponder handles the response to the GetAPIExpectationsPath request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPIExpectationsPathResponder(resp *http.Response) (result Expectation, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPIExpectationsPathEvents sends the get api expectations path events request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) GetAPIExpectationsPathEvents(ctx context.Context, pathParameter string, top *float64, skip *float64) (result ListEvent, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetAPIExpectationsPathEvents", err.Error())
	}

	req, err := client.GetAPIExpectationsPathEventsPreparer(ctx, pathParameter, top, skip)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIExpectationsPathEvents", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPIExpectationsPathEventsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIExpectationsPathEvents", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPIExpectationsPathEventsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPIExpectationsPathEvents", resp, "Failure responding to request")
	}

	return
}

// GetAPIExpectationsPathEventsPreparer prepares the GetAPIExpectationsPathEvents request.
func (client BaseClient) GetAPIExpectationsPathEventsPreparer(ctx context.Context, pathParameter string, top *float64, skip *float64) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	queryParameters := map[string]interface{}{}
	if top != nil {
		queryParameters["top"] = autorest.Encode("query", *top)
	} else {
		queryParameters["top"] = autorest.Encode("query", 25)
	}
	if skip != nil {
		queryParameters["skip"] = autorest.Encode("query", *skip)
	} else {
		queryParameters["skip"] = autorest.Encode("query", 0)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}/events", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPIExpectationsPathEventsSender sends the GetAPIExpectationsPathEvents request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPIExpectationsPathEventsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPIExpectationsPathEventsResponder handles the response to the GetAPIExpectationsPathEvents request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPIExpectationsPathEventsResponder(resp *http.Response) (result ListEvent, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPISystems sends the get api systems request.
func (client BaseClient) GetAPISystems(ctx context.Context, tenant string) (result ListSystem, err error) {
	req, err := client.GetAPISystemsPreparer(ctx, tenant)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPISystems", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPISystemsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPISystems", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPISystemsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPISystems", resp, "Failure responding to request")
	}

	return
}

// GetAPISystemsPreparer prepares the GetAPISystems request.
func (client BaseClient) GetAPISystemsPreparer(ctx context.Context, tenant string) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"tenant": autorest.Encode("query", tenant),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/systems"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPISystemsSender sends the GetAPISystems request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPISystemsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPISystemsResponder handles the response to the GetAPISystems request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPISystemsResponder(resp *http.Response) (result ListSystem, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAPISystemsPath sends the get api systems path request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) GetAPISystemsPath(ctx context.Context, pathParameter string) (result System, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetAPISystemsPath", err.Error())
	}

	req, err := client.GetAPISystemsPathPreparer(ctx, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPISystemsPath", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAPISystemsPathSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPISystemsPath", resp, "Failure sending request")
		return
	}

	result, err = client.GetAPISystemsPathResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetAPISystemsPath", resp, "Failure responding to request")
	}

	return
}

// GetAPISystemsPathPreparer prepares the GetAPISystemsPath request.
func (client BaseClient) GetAPISystemsPathPreparer(ctx context.Context, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/systems/{path}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAPISystemsPathSender sends the GetAPISystemsPath request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetAPISystemsPathSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAPISystemsPathResponder handles the response to the GetAPISystemsPath request. The method always
// closes the http.Response Body.
func (client BaseClient) GetAPISystemsPathResponder(resp *http.Response) (result System, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetFeatureInstance sends the get feature instance request.
func (client BaseClient) GetFeatureInstance(ctx context.Context, featureName string, featureVersion string, instanceName string) (result FeatureInstance, err error) {
	req, err := client.GetFeatureInstancePreparer(ctx, featureName, featureVersion, instanceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstance", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFeatureInstanceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstance", resp, "Failure sending request")
		return
	}

	result, err = client.GetFeatureInstanceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstance", resp, "Failure responding to request")
	}

	return
}

// GetFeatureInstancePreparer prepares the GetFeatureInstance request.
func (client BaseClient) GetFeatureInstancePreparer(ctx context.Context, featureName string, featureVersion string, instanceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"featureName":    autorest.Encode("path", featureName),
		"featureVersion": autorest.Encode("path", featureVersion),
		"instanceName":   autorest.Encode("path", instanceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/features/instances/{featureName}/{featureVersion}/{instanceName}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetFeatureInstanceSender sends the GetFeatureInstance request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetFeatureInstanceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetFeatureInstanceResponder handles the response to the GetFeatureInstance request. The method always
// closes the http.Response Body.
func (client BaseClient) GetFeatureInstanceResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetFeatureInstanceByKey sends the get feature instance by key request.
func (client BaseClient) GetFeatureInstanceByKey(ctx context.Context, key string) (result FeatureInstance, err error) {
	req, err := client.GetFeatureInstanceByKeyPreparer(ctx, key)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstanceByKey", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFeatureInstanceByKeySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstanceByKey", resp, "Failure sending request")
		return
	}

	result, err = client.GetFeatureInstanceByKeyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstanceByKey", resp, "Failure responding to request")
	}

	return
}

// GetFeatureInstanceByKeyPreparer prepares the GetFeatureInstanceByKey request.
func (client BaseClient) GetFeatureInstanceByKeyPreparer(ctx context.Context, key string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"key": autorest.Encode("path", key),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/features/instances/{key}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetFeatureInstanceByKeySender sends the GetFeatureInstanceByKey request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetFeatureInstanceByKeySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetFeatureInstanceByKeyResponder handles the response to the GetFeatureInstanceByKey request. The method always
// closes the http.Response Body.
func (client BaseClient) GetFeatureInstanceByKeyResponder(resp *http.Response) (result FeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetFeatureInstances sends the get feature instances request.
// Parameters:
// featureVersion - a SemVer version number.
// tenant - the tenant to filter instances by. Ignored for non-admins.
func (client BaseClient) GetFeatureInstances(ctx context.Context, featureName string, featureVersion string, versionRange string, instanceID string, tenant string) (result ListFeatureInstance, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: featureVersion,
			Constraints: []validation.Constraint{{Target: "featureVersion", Name: validation.Pattern, Rule: `^v?((\d+)\.(\d+)\.(\d+))(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?(?:\+([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "GetFeatureInstances", err.Error())
	}

	req, err := client.GetFeatureInstancesPreparer(ctx, featureName, featureVersion, versionRange, instanceID, tenant)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstances", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFeatureInstancesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstances", resp, "Failure sending request")
		return
	}

	result, err = client.GetFeatureInstancesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatureInstances", resp, "Failure responding to request")
	}

	return
}

// GetFeatureInstancesPreparer prepares the GetFeatureInstances request.
func (client BaseClient) GetFeatureInstancesPreparer(ctx context.Context, featureName string, featureVersion string, versionRange string, instanceID string, tenant string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if len(featureName) > 0 {
		queryParameters["featureName"] = autorest.Encode("query", featureName)
	}
	if len(featureVersion) > 0 {
		queryParameters["featureVersion"] = autorest.Encode("query", featureVersion)
	}
	if len(versionRange) > 0 {
		queryParameters["versionRange"] = autorest.Encode("query", versionRange)
	}
	if len(instanceID) > 0 {
		queryParameters["instanceID"] = autorest.Encode("query", instanceID)
	}
	if len(tenant) > 0 {
		queryParameters["tenant"] = autorest.Encode("query", tenant)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/features/instances"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetFeatureInstancesSender sends the GetFeatureInstances request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetFeatureInstancesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetFeatureInstancesResponder handles the response to the GetFeatureInstances request. The method always
// closes the http.Response Body.
func (client BaseClient) GetFeatureInstancesResponder(resp *http.Response) (result ListFeatureInstance, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetFeatures sends the get features request.
func (client BaseClient) GetFeatures(ctx context.Context, name string, versionRange string) (result ListFeature, err error) {
	req, err := client.GetFeaturesPreparer(ctx, name, versionRange)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatures", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFeaturesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatures", resp, "Failure sending request")
		return
	}

	result, err = client.GetFeaturesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "GetFeatures", resp, "Failure responding to request")
	}

	return
}

// GetFeaturesPreparer prepares the GetFeatures request.
func (client BaseClient) GetFeaturesPreparer(ctx context.Context, name string, versionRange string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if len(name) > 0 {
		queryParameters["name"] = autorest.Encode("query", name)
	}
	if len(versionRange) > 0 {
		queryParameters["versionRange"] = autorest.Encode("query", versionRange)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/features"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetFeaturesSender sends the GetFeatures request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetFeaturesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetFeaturesResponder handles the response to the GetFeatures request. The method always
// closes the http.Response Body.
func (client BaseClient) GetFeaturesResponder(resp *http.Response) (result ListFeature, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostAPIExpectations sends the post api expectations request.
func (client BaseClient) PostAPIExpectations(ctx context.Context, body *NewExpectation) (result Expectation, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.Name", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.DisplayName", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.Tenant", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.System", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.Schedule", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "PostAPIExpectations", err.Error())
	}

	req, err := client.PostAPIExpectationsPreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectations", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostAPIExpectationsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectations", resp, "Failure sending request")
		return
	}

	result, err = client.PostAPIExpectationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectations", resp, "Failure responding to request")
	}

	return
}

// PostAPIExpectationsPreparer prepares the PostAPIExpectations request.
func (client BaseClient) PostAPIExpectationsPreparer(ctx context.Context, body *NewExpectation) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/expectations"))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostAPIExpectationsSender sends the PostAPIExpectations request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PostAPIExpectationsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostAPIExpectationsResponder handles the response to the PostAPIExpectations request. The method always
// closes the http.Response Body.
func (client BaseClient) PostAPIExpectationsResponder(resp *http.Response) (result Expectation, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostAPIExpectationsPathEventsFailed sends the post api expectations path events failed request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) PostAPIExpectationsPathEventsFailed(ctx context.Context, pathParameter string, body *FailedExpectation) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "PostAPIExpectationsPathEventsFailed", err.Error())
	}

	req, err := client.PostAPIExpectationsPathEventsFailedPreparer(ctx, pathParameter, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectationsPathEventsFailed", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostAPIExpectationsPathEventsFailedSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectationsPathEventsFailed", resp, "Failure sending request")
		return
	}

	result, err = client.PostAPIExpectationsPathEventsFailedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectationsPathEventsFailed", resp, "Failure responding to request")
	}

	return
}

// PostAPIExpectationsPathEventsFailedPreparer prepares the PostAPIExpectationsPathEventsFailed request.
func (client BaseClient) PostAPIExpectationsPathEventsFailedPreparer(ctx context.Context, pathParameter string, body *FailedExpectation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}/events/failed", pathParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostAPIExpectationsPathEventsFailedSender sends the PostAPIExpectationsPathEventsFailed request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PostAPIExpectationsPathEventsFailedSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostAPIExpectationsPathEventsFailedResponder handles the response to the PostAPIExpectationsPathEventsFailed request. The method always
// closes the http.Response Body.
func (client BaseClient) PostAPIExpectationsPathEventsFailedResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostAPIExpectationsPathEventsFulfilled sends the post api expectations path events fulfilled request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) PostAPIExpectationsPathEventsFulfilled(ctx context.Context, pathParameter string, body *FulfilledExpectation) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "PostAPIExpectationsPathEventsFulfilled", err.Error())
	}

	req, err := client.PostAPIExpectationsPathEventsFulfilledPreparer(ctx, pathParameter, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectationsPathEventsFulfilled", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostAPIExpectationsPathEventsFulfilledSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectationsPathEventsFulfilled", resp, "Failure sending request")
		return
	}

	result, err = client.PostAPIExpectationsPathEventsFulfilledResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectationsPathEventsFulfilled", resp, "Failure responding to request")
	}

	return
}

// PostAPIExpectationsPathEventsFulfilledPreparer prepares the PostAPIExpectationsPathEventsFulfilled request.
func (client BaseClient) PostAPIExpectationsPathEventsFulfilledPreparer(ctx context.Context, pathParameter string, body *FulfilledExpectation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}/events/fulfilled", pathParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostAPIExpectationsPathEventsFulfilledSender sends the PostAPIExpectationsPathEventsFulfilled request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PostAPIExpectationsPathEventsFulfilledSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostAPIExpectationsPathEventsFulfilledResponder handles the response to the PostAPIExpectationsPathEventsFulfilled request. The method always
// closes the http.Response Body.
func (client BaseClient) PostAPIExpectationsPathEventsFulfilledResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostAPIExpectationsPathEventsRescheduled sends the post api expectations path events rescheduled request.
// Parameters:
// pathParameter - NRN resource path for a beacon resource. The "name" position may be redundent for the
// feature (ftr) and feature instance (fin) types. The "system" position is the dot-delimited hierarchy of
// system names above this resource, if the resource is contained within a system.
func (client BaseClient) PostAPIExpectationsPathEventsRescheduled(ctx context.Context, pathParameter string, body *RescheduledExpectation) (result String, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: pathParameter,
			Constraints: []validation.Constraint{{Target: "pathParameter", Name: validation.Pattern, Rule: `^nrn:beacon:(?<tenant>[^:]+:(?<type>sys|exp|ftr|fin):(?<feature>[^:]+)?:(?<version>[^:]+)?:(?<instance>[^:]*)?:(?<system>[^:]*)?:(?<name>[^:]*)?)$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "PostAPIExpectationsPathEventsRescheduled", err.Error())
	}

	req, err := client.PostAPIExpectationsPathEventsRescheduledPreparer(ctx, pathParameter, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectationsPathEventsRescheduled", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostAPIExpectationsPathEventsRescheduledSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectationsPathEventsRescheduled", resp, "Failure sending request")
		return
	}

	result, err = client.PostAPIExpectationsPathEventsRescheduledResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPIExpectationsPathEventsRescheduled", resp, "Failure responding to request")
	}

	return
}

// PostAPIExpectationsPathEventsRescheduledPreparer prepares the PostAPIExpectationsPathEventsRescheduled request.
func (client BaseClient) PostAPIExpectationsPathEventsRescheduledPreparer(ctx context.Context, pathParameter string, body *RescheduledExpectation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"path": autorest.Encode("path", pathParameter),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/expectations/{path}/events/rescheduled", pathParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostAPIExpectationsPathEventsRescheduledSender sends the PostAPIExpectationsPathEventsRescheduled request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PostAPIExpectationsPathEventsRescheduledSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostAPIExpectationsPathEventsRescheduledResponder handles the response to the PostAPIExpectationsPathEventsRescheduled request. The method always
// closes the http.Response Body.
func (client BaseClient) PostAPIExpectationsPathEventsRescheduledResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostAPISystems sends the post api systems request.
func (client BaseClient) PostAPISystems(ctx context.Context, body *SystemInput) (result SetObject, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: body,
			Constraints: []validation.Constraint{{Target: "body", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "body.Name", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "body.Tenant", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("beacon.BaseClient", "PostAPISystems", err.Error())
	}

	req, err := client.PostAPISystemsPreparer(ctx, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPISystems", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostAPISystemsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPISystems", resp, "Failure sending request")
		return
	}

	result, err = client.PostAPISystemsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "beacon.BaseClient", "PostAPISystems", resp, "Failure responding to request")
	}

	return
}

// PostAPISystemsPreparer prepares the PostAPISystems request.
func (client BaseClient) PostAPISystemsPreparer(ctx context.Context, body *SystemInput) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/systems"))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostAPISystemsSender sends the PostAPISystems request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PostAPISystemsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostAPISystemsResponder handles the response to the PostAPISystems request. The method always
// closes the http.Response Body.
func (client BaseClient) PostAPISystemsResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
